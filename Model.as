package  {		import flash.display.MovieClip;	import flash.events.Event;		public class Model extends MovieClip{		var grid:Grid;		var units:Array;		var view:View;		var activePlayer:Player;				public function Model(v:View) {			this.grid = new Grid();			this.units = new Array;			this.view = v;								}				public function walkAll():void{			//array mit effektiv ausgewählten einheiten?			for each (var e:Element in grid.elementArray){				e.walk();			}		}				public function getGrid():Grid{			return grid;		}				public function setActivePlayer(p:Player):void{			this.activePlayer = p;		}				public function getActivePlayer():Player{			return this.activePlayer;		}				public function createUnit(type:String, player:Player):Unit{			var unit:Unit;						switch(type){				case "rock": 	unit = new Rock(player.id); break;				case "paper":	unit = new Paper(player.id); break;				case "scissor": unit = new Scissor(player.id); break;			}			this.units.push(unit);			trace("Unit of type " + type+ " constructed");			player.addUnit(unit);					view.tintArray(unit.tintElements,player.color,1);						return unit;					}				/*public function fightHandler(evt:PlayerEvent):void{			trace("fight");			var unit1 = evt.unit1;			var unit2 = evt.unit2;			var elementStack = evt.tile.elementStack;			grid.obstaclemc.removeChild(unit1);			grid.obstaclemc.removeChild(unit2);			elementStack[elementStack.indexOf(unit1)] = null;			elementStack[elementStack.indexOf(unit2)] = null;			var tmpArray:Array = new Array();			for each (var u:Unit in elementStack){				if (u != null) tmpArray.push(u);			}			trace("vorher " + elementStack + " " + tmpArray);			elementStack = tmpArray;			trace("nachher " + elementStack + " " + tmpArray);		}*/					}	}