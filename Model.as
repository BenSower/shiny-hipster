package  {		import flash.display.MovieClip;	import flash.events.Event;		public class Model{		var grid:Grid;		var units:Array;		var view:View;		var activePlayer:Player;		var players:Array;		var fightMatrix:Array;								public function Model(v:View) {			this.grid = new Grid();			this.units = new Array;			this.view = v;			players = new Array();			grid.addEventListener(PlayerEvent.FIGHT, fightHandler);						fightMatrix = new Array();			if(fightMatrix[0] == undefined) fightMatrix[0] = new Array();			if(fightMatrix[1] == undefined) fightMatrix[1] = new Array();			if(fightMatrix[2] == undefined) fightMatrix[2] = new Array();			fightMatrix[0][0] = 0.5;			fightMatrix[1][1] = 0.5;			fightMatrix[2][2] = 0.5;			fightMatrix[0][1] = 0.2;			fightMatrix[1][2] = 0.2;			fightMatrix[2][0] = 0.2;			fightMatrix[0][2] = 0.8;			fightMatrix[1][0] = 0.8;			fightMatrix[2][1] = 0.8;								}				public function createPlayer(tintColor:uint):void{			var player:Player = new Player(tintColor);			players.push(player);		}				public function gameCreation(): void{			var tintColor1:uint = uint("0xff4500"); 			var tintColor2:uint = uint("0x0046aa"); 			this.createPlayer(tintColor1);			this.createPlayer(tintColor2);						addBase(grid.getTile(0,0), 0);			addBase(grid.getTile(23,18),1);						grid.getTile(0,1).createElement(createUnit("rock", players[0]));			grid.getTile(1,0).createElement(createUnit("paper", players[0]));			grid.getTile(1,1).createElement(createUnit("scissor", players[0]));									grid.getTile(22,17).createElement(createUnit("rock", players[1]));			grid.getTile(22,18).createElement(createUnit("scissor", players[1]));			grid.getTile(23,17).createElement(createUnit("paper", players[1]));						this.setActivePlayer(players[0]);					}				public function addBase(t:Tile, typ:int):void{			if(typ==0){ 				var b1:Base1 = new Base1();				t.setObstacle(b1);				b1.gotoAndStop(1);			}			else if(typ==1){				var b2:Base2 = new Base2();				t.setObstacle(b2);				b2.gotoAndStop(1);			}		}				public function walkAll():void{			//array mit effektiv ausgewählten einheiten?			for each (var e:Element in grid.elementArray){				e.walk();			}		}				public function getGrid():Grid{			return grid;		}				public function setActivePlayer(p:Player):void{			this.activePlayer = p;		}				public function getActivePlayer():Player{			return this.activePlayer;		}				public function createUnit(type:String, player:Player):Unit{			var unit:Unit;						switch(type){				case "rock": 	unit = new Rock(player.id); break;				case "paper":	unit = new Paper(player.id); break;				case "scissor": unit = new Scissor(player.id); break;			}			this.units.push(unit);			trace("Unit of type " + type+ " constructed");			player.addUnit(unit);					view.tintArray(unit.tintElements,player.color,1);						return unit;					}				public function getPlayerById(id:int):Player{			return players[id];		}				public function fightHandler(evt:PlayerEvent):void{			trace("fight");			var unit1 = evt.unit1;			var unit2 = evt.unit2;			var elementStack = evt.tile.elementStack;			unit1.walkPath = null;			unit2.walkPath = null;			grid.obstaclemc.removeChild(unit1);			grid.obstaclemc.removeChild(unit2);			elementStack[elementStack.indexOf(unit1)] = null;			elementStack[elementStack.indexOf(unit2)] = null;								var tmpArray:Array = new Array();			for each (var u:Unit in elementStack){				if (u != null) tmpArray.push(u);			}			evt.tile.elementStack = tmpArray;			evt.tile.setOwner(fightCalculation(unit1, unit2));			view.tintElement(evt.tile, getPlayerById(evt.tile.owner).color, 1);		}				public function fightCalculation(unit1:Unit, unit2:Unit):int{			var calc:Number = fightMatrix[unit1.unitId][unit2.unitId];			var rm:Number = Math.random();			trace(rm);			if(rm<calc) return unit1.playerId;			else return unit2.playerId;		}					}	}